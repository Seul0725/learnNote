Set 数据不重复
    new Set() 
    set.add()
    set.delete()
    set.has()
    set.clear()
    set.keys()
    set.values() 和keys返回的值一样
    set.entries()
    set.forEach(()=>{})
    [...new Set(arr)] 数组去重
Map
    new Map()
    map.set(key,value)
    map.get(key)
    map.delete(key)
    map.has(key)
    map.clear()
    map.keys()
    map.values()
    map.entries()
    map.forEach()
Iterator迭代器
    Array
    String
    Map
    Set
    arguments
    NodeList

    set.keys().next()指针指向数据结构的第一个成员，返回一个对象
ES6模块
    如果需要在Node环境中执行，需要进行babel的转换
    导出 
        export {}
        export let a = 1;
        export default a;
        export default function(){}
    导入
        import {} from '';
        import * as obj from ''
        inport test form ''
Promise 
    容器，内部封装了异步操作，异步代码同步编写
    let p = new Promise((resolve,reject)=>{
        /*if(true){
            resolve();
        }else{
            reject();
        }*/同步
        $.ajax({
            ...
            success(res){
                resolve(res);
            },
            error(err){
                reject(err);
            }
        });
    });
    p.then((res)=>{
        console.log(res);
    });
    p.catch((err)=>{
        console.log(err);
    });
Promise.resolve(p) 将p转成Promise对象，并且Promise对象的状态为resolved状态 
Promise.reject()
let p =Promise.all([p1,p2,p3])
    p.then((res)=>{
        [p1的响应,p2的响应,p3的响应]
    });
    p.catch((error)=>{
        error//返回一个错误对象
    });
//赛跑，谁快用谁的状态，用谁的结果
let p1 = Promise.race([p1,p2,p3]);
p.finally(()=>{})

-------------------------------------------
类  语法糖--构造函数-原型对象
继承 extends
    class Animal{
        //构造器
        constructor(name,age){
            //实例属性 小animal的属性
            this.name = name;
            this.age = age;
        }
        //实例的方法 小animal的方法
        sayName(){
            console.log(this.name);
        }
        //static 类方法 静态方法
        //小animal不能调用，类本身调用
        static say(){
            console.log('say');
        }
        
    }
    Animal.say();
    Animal.staticAttr = '静态属性';

    实例属性 constructor中this后边的
    实例方法 在类内部没有用static修饰的方法

    静态属性 在类外部。使用类名.属性名声明的属性，只能通过类名去调用
    静态方法 在类内部使用static修饰的方法，只能用类名去调用

类继承
    经典继承
    Dog Animal
    function Animal(name,age){}
    function Dog(name,age){
        Animal.call(this,name,age)
    }
    Dog.prototype = new Animal();

    1.extends关键字
    2.属性的继承
    3.方法的继承

    class Animal(){}
    class Dog extends Animal{}
    //实现了静态方法，静态属性，实例方法的继承
    //实例属性的继承需要手动写；在Dog类的构造函数中调用父类中的构造函数，传递参数
    //继承有两条线
    -子类对象继承父类对象
    -子类的原型对象继承父类的原型对象

    父类的静态属性和静态方法，子类可以调用，Dog继承Animal中的静态属性和静态方法
    父类中写的实例方法，在子类的原型中可以获取到。子类实例可以调用
